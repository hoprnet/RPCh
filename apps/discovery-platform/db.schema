###
# users - clients

T users (
    id - pk
    (name)
    (email)
    (www_address)
    (telegram)
    (last_logged_in_at)
    (mev_kickback_address)
    (mev_current_choice)
    timestamps
)
>> has_many clients
>> has_many chain_credentials
>> has_many federated_credentials
>> has_many monthly_quota_usages
-> triggers process_initial_monthly_usage()

T clients (
    id (pk)
    (name)
    user_id (fk)
    external_token (unique)
    (invalidated_at)
    timestamps
);
>> has_one user
>> has_many request_quota
>> has_many response_quota

###
# users - authentication

T chain_credentials (
    user_id (fk)
    address
    chain
);
>> has_one user

T federated_credentials (
    id (pk)
    user_id (fk)
    provider
    subject
);
>> has_one user


###
# nodes - tokens

T registered_nodes (
    id (pk)
    is_exit_node
    chain_id integer
    hoprd_api_endpoint
    hoprd_api_token
    (exit_app_pub_key)
    (exit_app_target)
    native_address character
    timestamps
);
>> has_many exit_node_tokens

T exit_node_tokens (
    id (pk)
    exit_id (fk)
    access_token (unique)
    (invalidated_at)
    timestamps
);
>> has_one registered_node
>> has_many request_quota
>> has_many response_quota

###
# aggregated routes

T one_hop_pairings (
    entry_id (fk)
    exit_id (fk)
    created_at
);
>> many_to_many: registered_node - registered_node

T zero_hop_pairings (
    entry_id (fk)
    exit_id (fk)
    created_at
);
>> many_to_many: registered_node - registered_node

###
# users - quota

T request_quotas (
    id (pk),
    client_id (fk)
    (rpc_method)
    segment_count
    (last_segment_length)
    created_at
    reported_by_id (fk)
);
>> has_one client
>> has_one exit_node_token
-> triggers process_monthly_usage()

T response_quotas (
    id (pk)
    client_id (fk)
    (rpc_method)
    segment_count
    (last_segment_length)
    created_at
    reported_by_id character (fk)
);
>> has_one client
>> has_one exit_node_token
-> triggers process_monthly_usage()

###
# aggregated quota

T monthly_quota_usages (
    user_id (fk)
    started_at
    req_count
    resp_count
    req_segment_count
    resp_segment_count
);
>> has_one user
>- populated by process_initial_monthly_usage()
>- populated by process_monthly_usage()

###
# payment

T billing_schemes (
    id (pk)
    name
    (desc)
    timestamps
    ...<todo>...
);

###
# packages - voucher

T packages (
    id (pk)
    name
    (desc)
    segment_count_per_month
    (billing_scheme_id) (fk)
    (alternative_billing_scheme_id) (fk)
    timestamps
);
>> has_one (has_one_more) billing_scheme
>> has_many vouchers

T vouchers (
    id (pk)
    package_id (fk)
    (name)
    code
    (valid_until)
    timestamps
);
>> has_one packages

###
# usage resolutions

# what packages does a user have
T users_packages (
    user_id (fk)
    package_id (fk)
    created_at
    (invalidated_at)
);
>> many_to_many: users - packages

# what vouchers did a user already redeem
T redeemed_vouchers (
    user_id (fk)
    voucher_id (fk)
    createdAt
);
>> many_to_many: users - vouchers

# logs of the webhooks received
T webhook_logs (
    id (pk)
    event_type (example: subscription/created)
    event_data (JSONB of entire payload)
    created_at
)
